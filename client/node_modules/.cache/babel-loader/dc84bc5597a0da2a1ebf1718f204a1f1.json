{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport { map, switchMap, mapTo } from 'rxjs/operators';\nimport { TYPES as DashboardTypes } from '../Redux/DashboardRedux';\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux';\nimport firebase from '../Firebase/index';\nexport const uploadTimesheetEpic = (action$, state$) => action$.pipe(ofType(DashboardTypes.UPLOAD_TIMESHEET), map(action => {\n  const storageRef = firebase.storage().ref().child(state$.value.UserReducers.userReducer.id);\n  console.log(action.payload.timesheetFile);\n  return storageRef.put(new File(action.payload, action.payload.name)).then(snapshot => {\n    return {\n      type: ''\n    };\n  });\n}));\nexport const uploadSuccessEpic = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_SUCCESS), mapTo({\n  type: DashboardTypes.TIMESHEET_UPLOAD_STOP\n}));\nexport const setTimesheetFileError = action$ => action$.pipe(ofType(DashboardTypes.SET_TIMESHEET_FILE_ERROR), map(action => ({\n  type: ErrorTypes.SET_ERROR,\n  payload: action.payload\n})));\nexport default null;","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Epics/DashboardEpics.js"],"names":["ofType","map","switchMap","mapTo","TYPES","DashboardTypes","ErrorTypes","firebase","uploadTimesheetEpic","action$","state$","pipe","UPLOAD_TIMESHEET","action","storageRef","storage","ref","child","value","UserReducers","userReducer","id","console","log","payload","timesheetFile","put","File","name","then","snapshot","type","uploadSuccessEpic","UPLOAD_SUCCESS","TIMESHEET_UPLOAD_STOP","setTimesheetFileError","SET_TIMESHEET_FILE_ERROR","SET_ERROR"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,SAASC,KAAK,IAAIC,cAAlB,QAAwC,yBAAxC;AACA,SAASD,KAAK,IAAIE,UAAlB,QAAoC,qBAApC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqBD,OAAO,CAACE,IAAR,CACtDX,MAAM,CAACK,cAAc,CAACO,gBAAhB,CADgD,EAEtDX,GAAG,CAACY,MAAM,IAAI;AACZ,QAAMC,UAAU,GAAGP,QAAQ,CAACQ,OAAT,GAAmBC,GAAnB,GAAyBC,KAAzB,CAA+BP,MAAM,CAACQ,KAAP,CAAaC,YAAb,CAA0BC,WAA1B,CAAsCC,EAArE,CAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACW,OAAP,CAAeC,aAA3B;AACA,SAAOX,UAAU,CAACY,GAAX,CAAe,IAAIC,IAAJ,CAASd,MAAM,CAACW,OAAhB,EAAyBX,MAAM,CAACW,OAAP,CAAeI,IAAxC,CAAf,EAA8DC,IAA9D,CAAoEC,QAAD,IAAc;AACtF,WAAO;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAP;AACD,GAFM,CAAP;AAGD,CANE,CAFmD,CAAjD;AAWP,OAAO,MAAMC,iBAAiB,GAAIvB,OAAD,IAAaA,OAAO,CAACE,IAAR,CAC5CX,MAAM,CAACK,cAAc,CAAC4B,cAAhB,CADsC,EAE5C9B,KAAK,CAAC;AAAE4B,EAAAA,IAAI,EAAE1B,cAAc,CAAC6B;AAAvB,CAAD,CAFuC,CAAvC;AAKP,OAAO,MAAMC,qBAAqB,GAAI1B,OAAD,IAAaA,OAAO,CAACE,IAAR,CAChDX,MAAM,CAACK,cAAc,CAAC+B,wBAAhB,CAD0C,EAEhDnC,GAAG,CAAEY,MAAD,KAAa;AAAEkB,EAAAA,IAAI,EAAEzB,UAAU,CAAC+B,SAAnB;AAA8Bb,EAAAA,OAAO,EAAEX,MAAM,CAACW;AAA9C,CAAb,CAAD,CAF6C,CAA3C;AAKP,eAAe,IAAf","sourcesContent":["import { ofType } from 'redux-observable'\nimport { map, switchMap, mapTo } from 'rxjs/operators';\nimport { TYPES as DashboardTypes } from '../Redux/DashboardRedux'\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux'\nimport firebase from '../Firebase/index'\n\nexport const uploadTimesheetEpic = (action$, state$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_TIMESHEET),\n  map(action => {\n    const storageRef = firebase.storage().ref().child(state$.value.UserReducers.userReducer.id)\n    console.log(action.payload.timesheetFile)\n    return storageRef.put(new File(action.payload, action.payload.name)).then((snapshot) => {\n      return { type: '' }\n    })\n  })\n)\n\nexport const uploadSuccessEpic = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_SUCCESS),\n  mapTo({ type: DashboardTypes.TIMESHEET_UPLOAD_STOP })\n)\n\nexport const setTimesheetFileError = (action$) => action$.pipe(\n  ofType(DashboardTypes.SET_TIMESHEET_FILE_ERROR),\n  map((action) => ({ type: ErrorTypes.SET_ERROR, payload: action.payload }))\n)\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}