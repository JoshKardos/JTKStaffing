{"ast":null,"code":"import { combineEpics, ofType } from 'redux-observable';\nimport { mapTo, delay, map, empty } from 'rxjs/operators';\nimport { combineReducers } from 'redux';\nexport const pingEpic = action$ => action$.pipe(ofType('PING'), delay(1000), // Asynchronously wait 1000ms then continue\nmapTo({\n  type: 'PONG'\n}));\nexport const pongEpic = action$ => action$.pipe(ofType('PONG'), map(() => {\n  console.log('PONG');\n  return empty();\n}));\nexport const ping = () => ({\n  type: 'PING'\n});\nexport const rootReducer = combineReducers({\n  ping\n}); // eslint-disable-next-line import/prefer-default-export\n\nexport const rootEpic = combineEpics(pingEpic, pongEpic);","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Epics/index.js"],"names":["combineEpics","ofType","mapTo","delay","map","empty","combineReducers","pingEpic","action$","pipe","type","pongEpic","console","log","ping","rootReducer","rootEpic"],"mappings":"AAAA,SACEA,YADF,EAEEC,MAFF,QAGO,kBAHP;AAIA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,GAAvB,EAA4BC,KAA5B,QAAyC,gBAAzC;AAEA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAO,MAAMC,QAAQ,GAAGC,OAAO,IAAIA,OAAO,CAACC,IAAR,CACjCR,MAAM,CAAC,MAAD,CAD2B,EAEjCE,KAAK,CAAC,IAAD,CAF4B,EAEpB;AACbD,KAAK,CAAC;AAAEQ,EAAAA,IAAI,EAAE;AAAR,CAAD,CAH4B,CAA5B;AAMP,OAAO,MAAMC,QAAQ,GAAGH,OAAO,IAAIA,OAAO,CAACC,IAAR,CACjCR,MAAM,CAAC,MAAD,CAD2B,EAEjCG,GAAG,CAAC,MAAM;AACRQ,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,SAAOR,KAAK,EAAZ;AACD,CAHE,CAF8B,CAA5B;AAQP,OAAO,MAAMS,IAAI,GAAG,OAAO;AAAEJ,EAAAA,IAAI,EAAE;AAAR,CAAP,CAAb;AAEP,OAAO,MAAMK,WAAW,GAAGT,eAAe,CAAC;AACzCQ,EAAAA;AADyC,CAAD,CAAnC,C,CAIP;;AACA,OAAO,MAAME,QAAQ,GAAGhB,YAAY,CAClCO,QADkC,EAElCI,QAFkC,CAA7B","sourcesContent":["import {\n  combineEpics,\n  ofType\n} from 'redux-observable'\nimport { mapTo, delay, map, empty } from 'rxjs/operators';\n\nimport { combineReducers } from 'redux'\n\nexport const pingEpic = action$ => action$.pipe(\n  ofType('PING'),\n  delay(1000), // Asynchronously wait 1000ms then continue\n  mapTo({ type: 'PONG' })\n)\n\nexport const pongEpic = action$ => action$.pipe(\n  ofType('PONG'),\n  map(() => {\n    console.log('PONG')\n    return empty()\n  })\n)\n\nexport const ping = () => ({ type: 'PING' })\n\nexport const rootReducer = combineReducers({\n  ping\n});\n\n// eslint-disable-next-line import/prefer-default-export\nexport const rootEpic = combineEpics(\n  pingEpic,\n  pongEpic\n);\n"]},"metadata":{},"sourceType":"module"}