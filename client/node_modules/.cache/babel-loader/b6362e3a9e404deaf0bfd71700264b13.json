{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport { map, switchMap, mapTo } from 'rxjs/operators';\nimport { TYPES as DashboardTypes } from '../Redux/DashboardRedux';\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux';\nimport firebase from '../Firebase/index';\nexport const uploadErrorEpic = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_ERROR), mapTo({\n  type: ErrorTypes.SET_ERROR,\n  payload: 'Error saving to our records, try again...'\n}));\nexport const saveToDatabase = (action$, state$) => action$.pipe(ofType(DashboardTypes.UPLOAD_SUCCESS), switchMap(action => {\n  const userTimesheetRef = firebase.database().ref(`/user-timesheets/${state$.value.UserReducers.userReducer.id}/`).child();\n  const userTimesheetRefKey = userTimesheetRef.key;\n}));\nexport const uploadCompleteEpic = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_SUCCESS, DashboardTypes.UPLOAD_ERROR), mapTo({\n  type: DashboardTypes.TIMESHEET_UPLOAD_STOP\n}));\nexport const showUploadSuccessEpic = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_SUCCESS), mapTo({\n  type: ErrorTypes.SET_ERROR,\n  payload: 'Successfully uploaded your timesheet'\n}));\nexport const setTimesheetFileError = action$ => action$.pipe(ofType(DashboardTypes.SET_TIMESHEET_FILE_ERROR), map(action => ({\n  type: ErrorTypes.SET_ERROR,\n  payload: action.payload\n})));\nexport default null;","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Epics/DashboardEpics.js"],"names":["ofType","map","switchMap","mapTo","TYPES","DashboardTypes","ErrorTypes","firebase","uploadErrorEpic","action$","pipe","UPLOAD_ERROR","type","SET_ERROR","payload","saveToDatabase","state$","UPLOAD_SUCCESS","action","userTimesheetRef","database","ref","value","UserReducers","userReducer","id","child","userTimesheetRefKey","key","uploadCompleteEpic","TIMESHEET_UPLOAD_STOP","showUploadSuccessEpic","setTimesheetFileError","SET_TIMESHEET_FILE_ERROR"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,SAASC,KAAK,IAAIC,cAAlB,QAAwC,yBAAxC;AACA,SAASD,KAAK,IAAIE,UAAlB,QAAoC,qBAApC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,OAAO,MAAMC,eAAe,GAAIC,OAAD,IAAaA,OAAO,CAACC,IAAR,CAC1CV,MAAM,CAACK,cAAc,CAACM,YAAhB,CADoC,EAE1CR,KAAK,CAAC;AAAES,EAAAA,IAAI,EAAEN,UAAU,CAACO,SAAnB;AAA8BC,EAAAA,OAAO,EAAE;AAAvC,CAAD,CAFqC,CAArC;AAKP,OAAO,MAAMC,cAAc,GAAG,CAACN,OAAD,EAAUO,MAAV,KAAqBP,OAAO,CAACC,IAAR,CACjDV,MAAM,CAACK,cAAc,CAACY,cAAhB,CAD2C,EAEjDf,SAAS,CAACgB,MAAM,IAAI;AAClB,QAAMC,gBAAgB,GAAGZ,QAAQ,CAACa,QAAT,GAAoBC,GAApB,CAAyB,oBAAmBL,MAAM,CAACM,KAAP,CAAaC,YAAb,CAA0BC,WAA1B,CAAsCC,EAAG,GAArF,EAAyFC,KAAzF,EAAzB;AACA,QAAMC,mBAAmB,GAAGR,gBAAgB,CAACS,GAA7C;AACD,CAHQ,CAFwC,CAA5C;AAQP,OAAO,MAAMC,kBAAkB,GAAIpB,OAAD,IAAaA,OAAO,CAACC,IAAR,CAC7CV,MAAM,CAACK,cAAc,CAACY,cAAhB,EAAgCZ,cAAc,CAACM,YAA/C,CADuC,EAE7CR,KAAK,CAAC;AAAES,EAAAA,IAAI,EAAEP,cAAc,CAACyB;AAAvB,CAAD,CAFwC,CAAxC;AAKP,OAAO,MAAMC,qBAAqB,GAAItB,OAAD,IAAaA,OAAO,CAACC,IAAR,CAChDV,MAAM,CAACK,cAAc,CAACY,cAAhB,CAD0C,EAEhDd,KAAK,CAAC;AAAES,EAAAA,IAAI,EAAEN,UAAU,CAACO,SAAnB;AAA8BC,EAAAA,OAAO,EAAE;AAAvC,CAAD,CAF2C,CAA3C;AAKP,OAAO,MAAMkB,qBAAqB,GAAIvB,OAAD,IAAaA,OAAO,CAACC,IAAR,CAChDV,MAAM,CAACK,cAAc,CAAC4B,wBAAhB,CAD0C,EAEhDhC,GAAG,CAAEiB,MAAD,KAAa;AAAEN,EAAAA,IAAI,EAAEN,UAAU,CAACO,SAAnB;AAA8BC,EAAAA,OAAO,EAAEI,MAAM,CAACJ;AAA9C,CAAb,CAAD,CAF6C,CAA3C;AAKP,eAAe,IAAf","sourcesContent":["import { ofType } from 'redux-observable'\nimport { map, switchMap, mapTo } from 'rxjs/operators';\nimport { TYPES as DashboardTypes } from '../Redux/DashboardRedux'\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux'\nimport firebase from '../Firebase/index'\n\nexport const uploadErrorEpic = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_ERROR),\n  mapTo({ type: ErrorTypes.SET_ERROR, payload: 'Error saving to our records, try again...' })\n)\n\nexport const saveToDatabase = (action$, state$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_SUCCESS),\n  switchMap(action => {\n    const userTimesheetRef = firebase.database().ref(`/user-timesheets/${state$.value.UserReducers.userReducer.id}/`).child()\n    const userTimesheetRefKey = userTimesheetRef.key\n  })\n)\n\nexport const uploadCompleteEpic = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_SUCCESS, DashboardTypes.UPLOAD_ERROR),\n  mapTo({ type: DashboardTypes.TIMESHEET_UPLOAD_STOP })\n)\n\nexport const showUploadSuccessEpic = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_SUCCESS),\n  mapTo({ type: ErrorTypes.SET_ERROR, payload: 'Successfully uploaded your timesheet' })\n)\n\nexport const setTimesheetFileError = (action$) => action$.pipe(\n  ofType(DashboardTypes.SET_TIMESHEET_FILE_ERROR),\n  map((action) => ({ type: ErrorTypes.SET_ERROR, payload: action.payload }))\n)\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}