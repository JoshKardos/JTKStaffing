{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport axios from 'axios';\nimport { map, mapTo } from 'rxjs/operators';\nimport { TYPES as DashboardTypes } from '../Redux/DashboardRedux';\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux';\nimport firebase from '../Firebase/index';\nexport const uploadErrorEpic = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_ERROR), mapTo({\n  type: ErrorTypes.SET_ERROR,\n  payload: 'Error saving to our records, try again...'\n}));\nexport const saveToDatabase = action$ => action$.pipe(ofType(DashboardTypes.SAVE_TO_DATABASE), map(action => {\n  const filepath = action.filepath,\n        id = action.id,\n        timestamp = action.timestamp,\n        userId = action.userId,\n        timesheetTimePeriod = action.timesheetTimePeriod,\n        downloadUrl = action.downloadUrl; // get timesheet id, user id, timestamp\n\n  const userTimesheetRef = firebase.database().ref(`/user-timesheets/${userId}/${id}/`);\n  userTimesheetRef.set({\n    timesheetTimePeriod,\n    filepath,\n    id,\n    userId,\n    timestamp,\n    downloadUrl\n  });\n  return {\n    type: DashboardTypes.UPLOAD_SUCCESS\n  };\n}));\nexport const sendEmailEpic = (action$, state$) => action$.pipe(ofType(DashboardTypes.UPLOAD_SUCCESS), map(action => {\n  console.log(JSON.stringify(state$));\n  const adminId = state$.UserReducers.userReducer.adminId;\n  axios.post('/api/form', {\n    adminId\n  });\n  return {\n    type: ''\n  };\n}));\nexport const uploadCompleteEpic = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_SUCCESS, DashboardTypes.UPLOAD_ERROR), mapTo({\n  type: DashboardTypes.TIMESHEET_UPLOAD_STOP\n}));\nexport const showUploadSuccessEpic = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_SUCCESS), mapTo({\n  type: ErrorTypes.SET_ERROR,\n  payload: 'Successfully uploaded your timesheet'\n}));\nexport const setTimesheetFileError = action$ => action$.pipe(ofType(DashboardTypes.SET_TIMESHEET_FILE_ERROR), map(action => ({\n  type: ErrorTypes.SET_ERROR,\n  payload: action.payload\n})));\nexport default null;","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/client/src/Epics/DashboardEpics.js"],"names":["ofType","axios","map","mapTo","TYPES","DashboardTypes","ErrorTypes","firebase","uploadErrorEpic","action$","pipe","UPLOAD_ERROR","type","SET_ERROR","payload","saveToDatabase","SAVE_TO_DATABASE","action","filepath","id","timestamp","userId","timesheetTimePeriod","downloadUrl","userTimesheetRef","database","ref","set","UPLOAD_SUCCESS","sendEmailEpic","state$","console","log","JSON","stringify","adminId","UserReducers","userReducer","post","uploadCompleteEpic","TIMESHEET_UPLOAD_STOP","showUploadSuccessEpic","setTimesheetFileError","SET_TIMESHEET_FILE_ERROR"],"mappings":"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","sourcesContent":["import { ofType } from 'redux-observable'\nimport axios from 'axios'\nimport { map, mapTo } from 'rxjs/operators';\nimport { TYPES as DashboardTypes } from '../Redux/DashboardRedux'\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux'\nimport firebase from '../Firebase/index'\n\nexport const uploadErrorEpic = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_ERROR),\n  mapTo({ type: ErrorTypes.SET_ERROR, payload: 'Error saving to our records, try again...' })\n)\n\nexport const saveToDatabase = (action$) => action$.pipe(\n  ofType(DashboardTypes.SAVE_TO_DATABASE),\n  map(action => {\n    const { filepath, id, timestamp, userId, timesheetTimePeriod, downloadUrl } = action\n    // get timesheet id, user id, timestamp\n    const userTimesheetRef = firebase.database().ref(`/user-timesheets/${userId}/${id}/`)\n    userTimesheetRef.set({\n      timesheetTimePeriod,\n      filepath,\n      id,\n      userId,\n      timestamp,\n      downloadUrl\n    })\n    return { type: DashboardTypes.UPLOAD_SUCCESS }\n  })\n)\n\nexport const sendEmailEpic = (action$, state$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_SUCCESS),\n  map( action => {\n    console.log(JSON.stringify(state$))\n    const adminId = state$.UserReducers.userReducer.adminId\n    axios.post('/api/form', {\n      adminId\n    })\n    return { type: '' }\n  })\n)\n\nexport const uploadCompleteEpic = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_SUCCESS, DashboardTypes.UPLOAD_ERROR),\n  mapTo({ type: DashboardTypes.TIMESHEET_UPLOAD_STOP })\n)\n\nexport const showUploadSuccessEpic = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_SUCCESS),\n  mapTo({ type: ErrorTypes.SET_ERROR, payload: 'Successfully uploaded your timesheet' })\n)\n\nexport const setTimesheetFileError = (action$) => action$.pipe(\n  ofType(DashboardTypes.SET_TIMESHEET_FILE_ERROR),\n  map((action) => ({ type: ErrorTypes.SET_ERROR, payload: action.payload }))\n)\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}