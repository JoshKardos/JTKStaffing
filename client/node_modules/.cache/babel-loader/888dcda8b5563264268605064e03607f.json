{"ast":null,"code":"var _jsxFileName = \"/Users/joshkardos/Desktop/JTKStaffing/src/Containers/MainScreen.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport firebase from '../Firebase/index';\nimport { LAYOUTS } from '../Redux/LayoutRedux';\nimport MenuBar from '../Components/MenuBar/MenuBar';\nimport LogInLayout from './LogIn/LogInLayout';\nimport SignUpLayout from './SignUp/SignUpLayout';\nimport { signUp, setSignUpError, fetchUserData } from '../Redux/UserRedux';\nimport { resetError } from '../Redux/ErrorRedux';\nimport GenericErrorModal from './GenericErrorModal';\n\nclass MainScreen extends Component {\n  componentDidMount() {\n    const fetchUserData = this.props.fetchUserData;\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        const action = {\n          payload: user.uid\n        }; // User is signed in.\n\n        fetchUserData(action);\n      } else {\n        // No user is signed in.\n        console.log('NOT SIGNED IN');\n      }\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          currentLayout = _this$props.currentLayout,\n          signUp = _this$props.signUp,\n          errorDescription = _this$props.errorDescription,\n          resetError = _this$props.resetError,\n          signUpLoading = _this$props.signUpLoading,\n          setSignUpError = _this$props.setSignUpError;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(MenuBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), errorDescription ? React.createElement(GenericErrorModal, {\n      errorDescription: errorDescription,\n      resetError: resetError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }) : null, currentLayout === LAYOUTS.LOGIN && React.createElement(LogInLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), currentLayout === LAYOUTS.SIGNUP && React.createElement(SignUpLayout, {\n      signUp: signUp,\n      isLoading: signUpLoading,\n      setSignUpError: setSignUpError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }\n\n}\n\nMainScreen.propTypes = {\n  currentLayout: PropTypes.string.isRequired,\n  signUp: PropTypes.func.isRequired,\n  errorDescription: PropTypes.string.isRequired,\n  resetError: PropTypes.func.isRequired,\n  signUpLoading: PropTypes.bool.isRequired,\n  setSignUpError: PropTypes.func.isRequired,\n  fetchUserData: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  currentLayout: state.LayoutReducers.layoutReducer.currentLayout,\n  signUpLoading: state.UserReducers.userReducer.signUpLoading,\n  errorDescription: state.ErrorReducers.errorReducer.errorDescription\n});\n\nconst mapDispatchToProps = dispatch => ({\n  logIn: (email, password) => dispatch(logIn(email, password)),\n  signUp: (name, email, password, company) => dispatch(signUp(name, email, password, company)),\n  setSignUpError: error => dispatch(setSignUpError(error)),\n  resetError: () => dispatch(resetError()),\n  fetchUserData: userId => dispatch(fetchUserData(userId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainScreen); // export default MainScreen","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Containers/MainScreen.js"],"names":["React","Component","PropTypes","connect","firebase","LAYOUTS","MenuBar","LogInLayout","SignUpLayout","signUp","setSignUpError","fetchUserData","resetError","GenericErrorModal","MainScreen","componentDidMount","props","auth","onAuthStateChanged","user","action","payload","uid","console","log","render","currentLayout","errorDescription","signUpLoading","LOGIN","SIGNUP","propTypes","string","isRequired","func","bool","mapStateToProps","state","LayoutReducers","layoutReducer","UserReducers","userReducer","ErrorReducers","errorReducer","mapDispatchToProps","dispatch","logIn","email","password","name","company","error","userId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport firebase from '../Firebase/index'\nimport { LAYOUTS } from '../Redux/LayoutRedux'\nimport MenuBar from '../Components/MenuBar/MenuBar'\nimport LogInLayout from './LogIn/LogInLayout'\nimport SignUpLayout from './SignUp/SignUpLayout'\nimport { signUp, setSignUpError, fetchUserData } from '../Redux/UserRedux'\nimport { resetError } from '../Redux/ErrorRedux'\nimport GenericErrorModal from './GenericErrorModal'\n\nclass MainScreen extends Component {\n  componentDidMount() {\n    const { fetchUserData } = this.props\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        const action = {\n          payload: user.uid\n        }\n        // User is signed in.\n        fetchUserData(action)\n      } else {\n        // No user is signed in.\n        console.log('NOT SIGNED IN')\n      }\n    })\n  }\n\n  render() {\n    const { currentLayout, signUp, errorDescription, resetError, signUpLoading, setSignUpError } = this.props\n    return (\n      <div>\n        <MenuBar />\n        { errorDescription ?\n          <GenericErrorModal errorDescription={errorDescription} resetError={resetError} /> : null}\n        { currentLayout === LAYOUTS.LOGIN && <LogInLayout /> }\n        { currentLayout === LAYOUTS.SIGNUP && <SignUpLayout signUp={signUp} isLoading={signUpLoading} setSignUpError={setSignUpError} /> }\n      </div>\n    )\n  }\n}\n\nMainScreen.propTypes = {\n  currentLayout: PropTypes.string.isRequired,\n  signUp: PropTypes.func.isRequired,\n  errorDescription: PropTypes.string.isRequired,\n  resetError: PropTypes.func.isRequired,\n  signUpLoading: PropTypes.bool.isRequired,\n  setSignUpError: PropTypes.func.isRequired,\n  fetchUserData: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n  currentLayout: state.LayoutReducers.layoutReducer.currentLayout,\n  signUpLoading: state.UserReducers.userReducer.signUpLoading,\n  errorDescription: state.ErrorReducers.errorReducer.errorDescription\n})\n\nconst mapDispatchToProps = dispatch => ({\n  logIn: (email, password) => dispatch(logIn(email, password)),\n  signUp: (name, email, password, company) => dispatch(signUp(name, email, password, company)),\n  setSignUpError: (error) => dispatch(setSignUpError(error)),\n  resetError: () => dispatch(resetError()),\n  fetchUserData: (userId) => dispatch(fetchUserData(userId))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainScreen)\n// export default MainScreen\n"]},"metadata":{},"sourceType":"module"}