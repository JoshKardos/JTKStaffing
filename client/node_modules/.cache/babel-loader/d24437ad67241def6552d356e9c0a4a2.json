{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport { map, switchMap, mapTo } from 'rxjs/operators';\nimport { TYPES as DashboardTypes } from '../Redux/DashboardRedux';\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux';\nimport firebase from '../Firebase/index';\nexport const uploadErrorEpic = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_ERROR), mapTo({\n  type: ErrorTypes.SET_ERROR,\n  payload: 'Error saving to our records, try again...'\n}));\nexport const saveToDatabase = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_SUCCESS), switchMap(action => {\n  const _action$payload = action.payload,\n        filepath = _action$payload.filepath,\n        id = _action$payload.id,\n        timestamp = _action$payload.timestamp,\n        downloadUrl = _action$payload.downloadUrl,\n        userId = _action$payload.userId,\n        timesheetTimePeriod = _action$payload.timesheetTimePeriod; // get timesheet id, user id, timestamp\n\n  const userTimesheetRef = firebase.database().ref(`/user-timesheets/${userId}/${id}/`);\n  userTimesheetRef.set({\n    timesheetTimePeriod,\n    filepath,\n    id,\n    userId,\n    timestamp,\n    downloadUrl\n  });\n}));\nexport const uploadCompleteEpic = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_SUCCESS, DashboardTypes.UPLOAD_ERROR), mapTo({\n  type: DashboardTypes.TIMESHEET_UPLOAD_STOP\n}));\nexport const showUploadSuccessEpic = action$ => action$.pipe(ofType(DashboardTypes.UPLOAD_SUCCESS), mapTo({\n  type: ErrorTypes.SET_ERROR,\n  payload: 'Successfully uploaded your timesheet'\n}));\nexport const setTimesheetFileError = action$ => action$.pipe(ofType(DashboardTypes.SET_TIMESHEET_FILE_ERROR), map(action => ({\n  type: ErrorTypes.SET_ERROR,\n  payload: action.payload\n})));\nexport default null;","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Epics/DashboardEpics.js"],"names":["ofType","map","switchMap","mapTo","TYPES","DashboardTypes","ErrorTypes","firebase","uploadErrorEpic","action$","pipe","UPLOAD_ERROR","type","SET_ERROR","payload","saveToDatabase","UPLOAD_SUCCESS","action","filepath","id","timestamp","downloadUrl","userId","timesheetTimePeriod","userTimesheetRef","database","ref","set","uploadCompleteEpic","TIMESHEET_UPLOAD_STOP","showUploadSuccessEpic","setTimesheetFileError","SET_TIMESHEET_FILE_ERROR"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,SAASC,KAAK,IAAIC,cAAlB,QAAwC,yBAAxC;AACA,SAASD,KAAK,IAAIE,UAAlB,QAAoC,qBAApC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,OAAO,MAAMC,eAAe,GAAIC,OAAD,IAAaA,OAAO,CAACC,IAAR,CAC1CV,MAAM,CAACK,cAAc,CAACM,YAAhB,CADoC,EAE1CR,KAAK,CAAC;AAAES,EAAAA,IAAI,EAAEN,UAAU,CAACO,SAAnB;AAA8BC,EAAAA,OAAO,EAAE;AAAvC,CAAD,CAFqC,CAArC;AAKP,OAAO,MAAMC,cAAc,GAAIN,OAAD,IAAaA,OAAO,CAACC,IAAR,CACzCV,MAAM,CAACK,cAAc,CAACW,cAAhB,CADmC,EAEzCd,SAAS,CAACe,MAAM,IAAI;AAAA,0BAC4DA,MAAM,CAACH,OADnE;AAAA,QACVI,QADU,mBACVA,QADU;AAAA,QACAC,EADA,mBACAA,EADA;AAAA,QACIC,SADJ,mBACIA,SADJ;AAAA,QACeC,WADf,mBACeA,WADf;AAAA,QAC4BC,MAD5B,mBAC4BA,MAD5B;AAAA,QACoCC,mBADpC,mBACoCA,mBADpC,EAElB;;AACA,QAAMC,gBAAgB,GAAGjB,QAAQ,CAACkB,QAAT,GAAoBC,GAApB,CAAyB,oBAAmBJ,MAAO,IAAGH,EAAG,GAAzD,CAAzB;AACAK,EAAAA,gBAAgB,CAACG,GAAjB,CAAqB;AACnBJ,IAAAA,mBADmB;AAEnBL,IAAAA,QAFmB;AAGnBC,IAAAA,EAHmB;AAInBG,IAAAA,MAJmB;AAKnBF,IAAAA,SALmB;AAMnBC,IAAAA;AANmB,GAArB;AAQD,CAZQ,CAFgC,CAApC;AAiBP,OAAO,MAAMO,kBAAkB,GAAInB,OAAD,IAAaA,OAAO,CAACC,IAAR,CAC7CV,MAAM,CAACK,cAAc,CAACW,cAAhB,EAAgCX,cAAc,CAACM,YAA/C,CADuC,EAE7CR,KAAK,CAAC;AAAES,EAAAA,IAAI,EAAEP,cAAc,CAACwB;AAAvB,CAAD,CAFwC,CAAxC;AAKP,OAAO,MAAMC,qBAAqB,GAAIrB,OAAD,IAAaA,OAAO,CAACC,IAAR,CAChDV,MAAM,CAACK,cAAc,CAACW,cAAhB,CAD0C,EAEhDb,KAAK,CAAC;AAAES,EAAAA,IAAI,EAAEN,UAAU,CAACO,SAAnB;AAA8BC,EAAAA,OAAO,EAAE;AAAvC,CAAD,CAF2C,CAA3C;AAKP,OAAO,MAAMiB,qBAAqB,GAAItB,OAAD,IAAaA,OAAO,CAACC,IAAR,CAChDV,MAAM,CAACK,cAAc,CAAC2B,wBAAhB,CAD0C,EAEhD/B,GAAG,CAAEgB,MAAD,KAAa;AAAEL,EAAAA,IAAI,EAAEN,UAAU,CAACO,SAAnB;AAA8BC,EAAAA,OAAO,EAAEG,MAAM,CAACH;AAA9C,CAAb,CAAD,CAF6C,CAA3C;AAKP,eAAe,IAAf","sourcesContent":["import { ofType } from 'redux-observable'\nimport { map, switchMap, mapTo } from 'rxjs/operators';\nimport { TYPES as DashboardTypes } from '../Redux/DashboardRedux'\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux'\nimport firebase from '../Firebase/index'\n\nexport const uploadErrorEpic = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_ERROR),\n  mapTo({ type: ErrorTypes.SET_ERROR, payload: 'Error saving to our records, try again...' })\n)\n\nexport const saveToDatabase = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_SUCCESS),\n  switchMap(action => {\n    const { filepath, id, timestamp, downloadUrl, userId, timesheetTimePeriod } = action.payload\n    // get timesheet id, user id, timestamp\n    const userTimesheetRef = firebase.database().ref(`/user-timesheets/${userId}/${id}/`)\n    userTimesheetRef.set({\n      timesheetTimePeriod,\n      filepath,\n      id,\n      userId,\n      timestamp,\n      downloadUrl\n    })\n  })\n)\n\nexport const uploadCompleteEpic = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_SUCCESS, DashboardTypes.UPLOAD_ERROR),\n  mapTo({ type: DashboardTypes.TIMESHEET_UPLOAD_STOP })\n)\n\nexport const showUploadSuccessEpic = (action$) => action$.pipe(\n  ofType(DashboardTypes.UPLOAD_SUCCESS),\n  mapTo({ type: ErrorTypes.SET_ERROR, payload: 'Successfully uploaded your timesheet' })\n)\n\nexport const setTimesheetFileError = (action$) => action$.pipe(\n  ofType(DashboardTypes.SET_TIMESHEET_FILE_ERROR),\n  map((action) => ({ type: ErrorTypes.SET_ERROR, payload: action.payload }))\n)\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}