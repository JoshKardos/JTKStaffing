{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport { map, mapTo } from 'rxjs/operators';\nimport { TYPES as UserTypes } from '../Redux/UserRedux';\nimport { TYPES as ErrorTypes, setError } from '../Redux/ErrorRedux';\nimport firebase from '../Firebase/index';\nexport const signUpEpic = action$ => action$.pipe(ofType(UserTypes.SIGN_UP), // delay(5000), // Asynchronously wait 1000ms then continue\n// mapTo(setError(\"EROR\"))\n// mapTo(action => {\n//   const { email } = action.payload\n//   const { password } = action.payload\n//   // firebase.auth().createUserWithEmailAndPassword(email, password).catch((error) => {\n//   //   // Handle Errors here.\n//   //   if (error !== null) {\n//   //     const errorCode = error.code\n//   //     const errorMessage = error.message\n//   //     return { type: '' }\n//   //   }\n//   //   return { type: '' }\n//   // })\n//   return { type: '' }\n// })\nmap(() => ({\n  type: ErrorTypes.SET_ERROR,\n  payload: {\n    error: 'erro'\n  }\n})));\nexport default null;","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Epics/UserEpics.js"],"names":["ofType","map","mapTo","TYPES","UserTypes","ErrorTypes","setError","firebase","signUpEpic","action$","pipe","SIGN_UP","type","SET_ERROR","payload","error"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,gBAA3B;AACA,SAASC,KAAK,IAAIC,SAAlB,QAAmC,oBAAnC;AACA,SAASD,KAAK,IAAIE,UAAlB,EAA8BC,QAA9B,QAA8C,qBAA9C;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,OAAO,MAAMC,UAAU,GAAGC,OAAO,IAAIA,OAAO,CAACC,IAAR,CACnCV,MAAM,CAACI,SAAS,CAACO,OAAX,CAD6B,EAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,GAAG,CAAC,OAAO;AAAEW,EAAAA,IAAI,EAAEP,UAAU,CAACQ,SAAnB;AAA8BC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT;AAAvC,CAAP,CAAD,CAlBgC,CAA9B;AAqBP,eAAe,IAAf","sourcesContent":["import { ofType } from 'redux-observable'\nimport { map, mapTo } from 'rxjs/operators';\nimport { TYPES as UserTypes } from '../Redux/UserRedux'\nimport { TYPES as ErrorTypes, setError } from '../Redux/ErrorRedux'\nimport firebase from '../Firebase/index'\n\nexport const signUpEpic = action$ => action$.pipe(\n  ofType(UserTypes.SIGN_UP),\n  // delay(5000), // Asynchronously wait 1000ms then continue\n  // mapTo(setError(\"EROR\"))\n  // mapTo(action => {\n  //   const { email } = action.payload\n  //   const { password } = action.payload\n  //   // firebase.auth().createUserWithEmailAndPassword(email, password).catch((error) => {\n  //   //   // Handle Errors here.\n  //   //   if (error !== null) {\n  //   //     const errorCode = error.code\n  //   //     const errorMessage = error.message\n  //   //     return { type: '' }\n  //   //   }\n  //   //   return { type: '' }\n  //   // })\n  //   return { type: '' }\n  // })\n  map(() => ({ type: ErrorTypes.SET_ERROR, payload: { error: 'erro' } }))\n)\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}