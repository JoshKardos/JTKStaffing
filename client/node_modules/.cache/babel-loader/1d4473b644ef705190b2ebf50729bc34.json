{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport { switchMap, mapTo, map, filter } from 'rxjs/operators';\nimport { TYPES as UserTypes, userLoggedIn } from '../Redux/UserRedux';\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux';\nimport { TYPES as LayoutTypes, LAYOUTS } from '../Redux/LayoutRedux';\nimport firebase from '../Firebase/index'; // action contains email and password so this should work for sign up as well , follow the same step 12/27\n\nexport const loginEpic = action$ => action$.pipe(ofType(UserTypes.LOGIN), switchMap(action => {\n  console.log(` here ${action}`);\n  const email = action.email,\n        password = action.password;\n  return firebase.auth().signInWithEmailAndPassword(email, password).then(value => {\n    const uid = value.user.uid;\n    return {\n      type: UserTypes.FETCH_USER_DATA,\n      payload: uid\n    };\n  }).catch(error => {\n    // error\n    const errorMessage = error.message;\n    return {\n      type: ErrorTypes.SET_ERROR,\n      payload: errorMessage\n    };\n  });\n}));\nexport const signUpEpic = action$ => action$.pipe(ofType(UserTypes.SIGN_UP), switchMap(action => {\n  const name = action.name,\n        email = action.email,\n        password = action.password,\n        company = action.company;\n  return firebase.auth().createUserWithEmailAndPassword(email, password).then(value => {\n    // success\n    const uid = value.user.uid;\n    const ref = firebase.database().ref(`/users/${uid}`);\n    ref.set({\n      name,\n      email,\n      company,\n      uid\n    });\n    return {\n      type: UserTypes.SET_USER_DATA,\n      payload: {\n        id: uid,\n        name,\n        email,\n        company\n      }\n    };\n  }).catch(error => {\n    // error\n    const errorMessage = error.message;\n    return {\n      type: ErrorTypes.SET_ERROR,\n      payload: errorMessage\n    };\n  });\n}));\nexport const setSignUpErrorEpic = action$ => action$.pipe(ofType(UserTypes.SET_SIGN_UP_ERROR), map(action => ({\n  type: ErrorTypes.SET_ERROR,\n  payload: action.payload\n})));\nexport const startSignUpLoadingEpic = action$ => action$.pipe(ofType(UserTypes.SIGN_UP), mapTo({\n  type: UserTypes.START_SIGN_UP_LOADING\n}));\nexport const stopSignUpLoadingEpic = (action$, state$) => action$.pipe(ofType(ErrorTypes.SET_ERROR, UserTypes.SET_USER_DATA), filter(() => state$.value.UserReducers.userReducer.signUpLoading), // only stop sign up loading if it has started\nmapTo({\n  type: UserTypes.STOP_SIGN_UP_LOADING\n})); // export const startLoginLoadingEpic = (action$, state$) => action$.pipe(\n//   ofType(UserTypes.LOGIN),\n//   mapTo({ })\n// )\n\nexport const stopLoginLoadingEpic = (action$, state$) => action$.pipe(ofType(ErrorTypes.SET_ERROR, UserTypes.SET_USER_DATA), filter(() => state$.value.UserReducers.userReducer.loginLoading), // only stop sign up loading if it has started\nmapTo({\n  type: UserTypes.STOP_LOGIN_LOADING\n}));\nexport const fetchUserDataEpic = (action$, state$) => action$.pipe(ofType(UserTypes.FETCH_USER_DATA), filter(() => !userLoggedIn(state$.value.UserReducers.userReducer)), // only fetch if user is not logged in\nswitchMap(action => {\n  const userId = action.payload;\n  return firebase.database().ref(`/users/${userId}`).once('value').then(snapshot => {\n    const name = snapshot.val() && snapshot.val().name || 'N/A';\n    const email = snapshot.val() && snapshot.val().email || 'N/A';\n    const company = snapshot.val() && snapshot.val().company || 'N/A';\n    const id = snapshot.val() && snapshot.val().uid || 'N/A';\n    return {\n      type: UserTypes.SET_USER_DATA,\n      payload: {\n        id,\n        name,\n        email,\n        company\n      }\n    };\n  });\n}));\nexport const homePageAfterLoginEpic = (action$, state$) => action$.pipe(ofType(UserTypes.SET_USER_DATA), filter(() => state$.value.LayoutReducers.layoutReducer.currentLayout === LAYOUTS.LOGIN), mapTo({\n  type: LayoutTypes.SET_HOME_LAYOUT\n}));\nexport const logOutEpic = action$ => action$.pipe(ofType(UserTypes.LOG_OUT), switchMap(() => firebase.auth().signOut().then(() => ( // Sign-out successful.\n{\n  type: LayoutTypes.SET_LOGIN_LAYOUT\n})).catch(error => ({\n  type: ErrorTypes.SET_ERROR,\n  payload: error.message\n}))));\nexport default null;","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Epics/UserEpics.js"],"names":["ofType","switchMap","mapTo","map","filter","TYPES","UserTypes","userLoggedIn","ErrorTypes","LayoutTypes","LAYOUTS","firebase","loginEpic","action$","pipe","LOGIN","action","console","log","email","password","auth","signInWithEmailAndPassword","then","value","uid","user","type","FETCH_USER_DATA","payload","catch","error","errorMessage","message","SET_ERROR","signUpEpic","SIGN_UP","name","company","createUserWithEmailAndPassword","ref","database","set","SET_USER_DATA","id","setSignUpErrorEpic","SET_SIGN_UP_ERROR","startSignUpLoadingEpic","START_SIGN_UP_LOADING","stopSignUpLoadingEpic","state$","UserReducers","userReducer","signUpLoading","STOP_SIGN_UP_LOADING","stopLoginLoadingEpic","loginLoading","STOP_LOGIN_LOADING","fetchUserDataEpic","userId","once","snapshot","val","homePageAfterLoginEpic","LayoutReducers","layoutReducer","currentLayout","SET_HOME_LAYOUT","logOutEpic","LOG_OUT","signOut","SET_LOGIN_LAYOUT"],"mappings":"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","sourcesContent":["import { ofType } from 'redux-observable'\nimport { switchMap, mapTo, map, filter } from 'rxjs/operators';\nimport { TYPES as UserTypes, userLoggedIn } from '../Redux/UserRedux'\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux'\nimport { TYPES as LayoutTypes, LAYOUTS } from '../Redux/LayoutRedux'\nimport firebase from '../Firebase/index'\n\n// action contains email and password so this should work for sign up as well , follow the same step 12/27\n\nexport const loginEpic = (action$) => action$.pipe(\n  ofType(UserTypes.LOGIN),\n  switchMap(action => {\n    console.log(` here ${action}`)\n    const { email, password } = action\n    return firebase.auth().signInWithEmailAndPassword(email, password).then((value) => {\n      const { uid } = value.user\n      return { type: UserTypes.FETCH_USER_DATA, payload: uid }\n    }).catch((error) => {\n      // error\n      const errorMessage = error.message\n      return { type: ErrorTypes.SET_ERROR, payload: errorMessage }\n    })\n  })\n)\n\nexport const signUpEpic = (action$) => action$.pipe(\n  ofType(UserTypes.SIGN_UP),\n  switchMap(action => {\n    const { name, email, password, company } = action\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then((value) => {\n      // success\n      const { uid } = value.user\n      const ref = firebase.database().ref(`/users/${uid}`)\n      ref.set({\n        name,\n        email,\n        company,\n        uid\n      })\n      return { type: UserTypes.SET_USER_DATA, payload: { id: uid, name, email, company } }\n    }).catch((error) => {\n      // error\n      const errorMessage = error.message\n      return { type: ErrorTypes.SET_ERROR, payload: errorMessage }\n    })\n  })\n)\n\nexport const setSignUpErrorEpic = (action$) => action$.pipe(\n  ofType(UserTypes.SET_SIGN_UP_ERROR),\n  map((action) => ({ type: ErrorTypes.SET_ERROR, payload: action.payload }))\n)\n\nexport const startSignUpLoadingEpic = (action$) => action$.pipe(\n  ofType(UserTypes.SIGN_UP),\n  mapTo({ type: UserTypes.START_SIGN_UP_LOADING })\n)\n\nexport const stopSignUpLoadingEpic = (action$, state$) => action$.pipe(\n  ofType(ErrorTypes.SET_ERROR, UserTypes.SET_USER_DATA),\n  filter(() => state$.value.UserReducers.userReducer.signUpLoading), // only stop sign up loading if it has started\n  mapTo({ type: UserTypes.STOP_SIGN_UP_LOADING })\n)\n\n// export const startLoginLoadingEpic = (action$, state$) => action$.pipe(\n//   ofType(UserTypes.LOGIN),\n//   mapTo({ })\n\n// )\n\nexport const stopLoginLoadingEpic = (action$, state$) => action$.pipe(\n  ofType(ErrorTypes.SET_ERROR, UserTypes.SET_USER_DATA),\n  filter(() => state$.value.UserReducers.userReducer.loginLoading), // only stop sign up loading if it has started\n  mapTo({ type: UserTypes.STOP_LOGIN_LOADING })\n)\n\nexport const fetchUserDataEpic = (action$, state$) => action$.pipe(\n  ofType(UserTypes.FETCH_USER_DATA),\n  filter(() => !userLoggedIn(state$.value.UserReducers.userReducer)), // only fetch if user is not logged in\n  switchMap((action) => {\n    const userId = action.payload\n    return firebase.database().ref(`/users/${userId}`).once('value').then((snapshot) => {\n      const name = (snapshot.val() && snapshot.val().name) || 'N/A'\n      const email = (snapshot.val() && snapshot.val().email) || 'N/A'\n      const company = (snapshot.val() && snapshot.val().company) || 'N/A'\n      const id = (snapshot.val() && snapshot.val().uid) || 'N/A'\n      return { type: UserTypes.SET_USER_DATA, payload: { id, name, email, company } }\n    })\n  })\n)\n\nexport const homePageAfterLoginEpic = (action$, state$) => action$.pipe(\n  ofType(UserTypes.SET_USER_DATA),\n  filter(() => state$.value.LayoutReducers.layoutReducer.currentLayout === LAYOUTS.LOGIN),\n  mapTo({ type: LayoutTypes.SET_HOME_LAYOUT })\n)\n\n\nexport const logOutEpic = (action$) => action$.pipe(\n  ofType(UserTypes.LOG_OUT),\n  switchMap(() => firebase.auth().signOut().then(() => (\n    // Sign-out successful.\n    { type: LayoutTypes.SET_LOGIN_LAYOUT }\n  )).catch(error => (\n    { type: ErrorTypes.SET_ERROR, payload: error.message }\n  )))\n)\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}