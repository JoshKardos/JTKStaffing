{"ast":null,"code":"var _jsxFileName = \"/Users/joshkardos/Desktop/JTKStaffing/src/Containers/MainScreen.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport firebase from '../Firebase/index';\nimport { LAYOUTS } from '../Redux/LayoutRedux';\nimport MenuBar from '../Components/MenuBar/MenuBar';\nimport LoginLayout from './LogIn/LoginLayout';\nimport SignUpLayout from './SignUp/SignUpLayout';\nimport DashboardLayout from './Dashboard/DashboardLayout';\nimport HomeLayout from './Home/HomeLayout';\nimport { uploadTimesheet, setTimesheetFileError, timesheetUploadError, saveToDatabase, timesheetUploadStart } from '../Redux/DashboardRedux';\nimport { signUp, setSignUpError, fetchUserData, login, setLoginError, userLoggedIn, adminLoggedIn } from '../Redux/UserRedux';\nimport { resetError } from '../Redux/ErrorRedux';\nimport GenericErrorModal from './GenericErrorModal';\nimport './MainScreenStyles.css';\n\nclass MainScreen extends Component {\n  componentDidMount() {\n    const fetchUserData = this.props.fetchUserData;\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        const action = {\n          payload: user.uid\n        }; // User is signed in.\n\n        fetchUserData(action);\n      } else {// No user is signed in.\n      }\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          currentLayout = _this$props.currentLayout,\n          signUp = _this$props.signUp,\n          errorDescription = _this$props.errorDescription,\n          resetError = _this$props.resetError,\n          signUpLoading = _this$props.signUpLoading,\n          setSignUpError = _this$props.setSignUpError,\n          login = _this$props.login,\n          loginLoading = _this$props.loginLoading,\n          setLoginError = _this$props.setLoginError,\n          userState = _this$props.userState,\n          setTimesheetFileError = _this$props.setTimesheetFileError,\n          uploadTimesheet = _this$props.uploadTimesheet,\n          timesheetUploadStart = _this$props.timesheetUploadStart,\n          timesheetUploadError = _this$props.timesheetUploadError,\n          saveToDatabase = _this$props.saveToDatabase,\n          timesheetUploading = _this$props.timesheetUploading;\n    const loggedIn = userLoggedIn(userState);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(MenuBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), errorDescription ? React.createElement(GenericErrorModal, {\n      errorDescription: errorDescription,\n      resetError: resetError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }) : null, !loggedIn && currentLayout === LAYOUTS.HOME && React.createElement(HomeLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), loggedIn && currentLayout === LAYOUTS.HOME && React.createElement(DashboardLayout, {\n      setTimesheetFileError: setTimesheetFileError,\n      isAdmin: adminLoggedIn(userState),\n      uploadTimesheet: uploadTimesheet,\n      userState: userState,\n      timesheetUploadStart: timesheetUploadStart,\n      timesheetUploadError: timesheetUploadError,\n      saveToDatabase: saveToDatabase,\n      timesheetUploading: timesheetUploading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), currentLayout === LAYOUTS.LOGIN && React.createElement(LoginLayout, {\n      login: login,\n      isLoading: loginLoading,\n      setLoginError: setLoginError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), currentLayout === LAYOUTS.SIGNUP && React.createElement(SignUpLayout, {\n      signUp: signUp,\n      isLoading: signUpLoading,\n      setSignUpError: setSignUpError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ContactTextContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"ContactText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Contact us at joshkardos@gmail.com\")));\n  }\n\n}\n\nMainScreen.propTypes = {\n  currentLayout: PropTypes.string.isRequired,\n  signUp: PropTypes.func.isRequired,\n  errorDescription: PropTypes.string.isRequired,\n  resetError: PropTypes.func.isRequired,\n  signUpLoading: PropTypes.bool.isRequired,\n  setSignUpError: PropTypes.func.isRequired,\n  setLoginError: PropTypes.func.isRequired,\n  fetchUserData: PropTypes.func.isRequired,\n  login: PropTypes.func.isRequired,\n  loginLoading: PropTypes.bool.isRequired,\n  userState: PropTypes.object.isRequired,\n  setTimesheetFileError: PropTypes.func.isRequired,\n  uploadTimesheet: PropTypes.func.isRequired,\n  timesheetUploadError: PropTypes.func.isRequired,\n  saveToDatabase: PropTypes.func.isRequired,\n  timesheetUploadStart: PropTypes.func.isRequired,\n  timesheetUploading: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n  userState: state.UserReducers.userReducer,\n  currentLayout: state.LayoutReducers.layoutReducer.currentLayout,\n  loginLoading: state.UserReducers.userReducer.loginLoading,\n  signUpLoading: state.UserReducers.userReducer.signUpLoading,\n  errorDescription: state.ErrorReducers.errorReducer.errorDescription,\n  timesheetUploading: state.DashboardReducers.dashboardReducer.uploading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  login: (email, password) => dispatch(login(email, password)),\n  signUp: (name, email, password, company) => dispatch(signUp(name, email, password, company)),\n  setSignUpError: error => dispatch(setSignUpError(error)),\n  setLoginError: error => dispatch(setLoginError(error)),\n  setTimesheetFileError: error => dispatch(setTimesheetFileError(error)),\n  resetError: () => dispatch(resetError()),\n  fetchUserData: userId => dispatch(fetchUserData(userId)),\n  uploadTimesheet: file => dispatch(uploadTimesheet(file)),\n  saveToDatabase: (timesheetTimePeriod, filepath, id, userId, timestamp) => dispatch(saveToDatabase(timesheetTimePeriod, filepath, id, userId, timestamp)),\n  timesheetUploadError: () => dispatch(timesheetUploadError()),\n  timesheetUploadStart: () => dispatch(timesheetUploadStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainScreen); // export default MainScreen","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Containers/MainScreen.js"],"names":["React","Component","PropTypes","connect","firebase","LAYOUTS","MenuBar","LoginLayout","SignUpLayout","DashboardLayout","HomeLayout","uploadTimesheet","setTimesheetFileError","timesheetUploadError","saveToDatabase","timesheetUploadStart","signUp","setSignUpError","fetchUserData","login","setLoginError","userLoggedIn","adminLoggedIn","resetError","GenericErrorModal","MainScreen","componentDidMount","props","auth","onAuthStateChanged","user","action","payload","uid","render","currentLayout","errorDescription","signUpLoading","loginLoading","userState","timesheetUploading","loggedIn","HOME","LOGIN","SIGNUP","propTypes","string","isRequired","func","bool","object","mapStateToProps","state","UserReducers","userReducer","LayoutReducers","layoutReducer","ErrorReducers","errorReducer","DashboardReducers","dashboardReducer","uploading","mapDispatchToProps","dispatch","email","password","name","company","error","userId","file","timesheetTimePeriod","filepath","id","timestamp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport firebase from '../Firebase/index'\nimport { LAYOUTS } from '../Redux/LayoutRedux'\nimport MenuBar from '../Components/MenuBar/MenuBar'\nimport LoginLayout from './LogIn/LoginLayout'\nimport SignUpLayout from './SignUp/SignUpLayout'\nimport DashboardLayout from './Dashboard/DashboardLayout'\nimport HomeLayout from './Home/HomeLayout'\nimport { uploadTimesheet, setTimesheetFileError, timesheetUploadError, saveToDatabase, timesheetUploadStart } from '../Redux/DashboardRedux'\nimport { signUp, setSignUpError, fetchUserData, login, setLoginError, userLoggedIn, adminLoggedIn } from '../Redux/UserRedux'\nimport { resetError } from '../Redux/ErrorRedux'\nimport GenericErrorModal from './GenericErrorModal'\nimport './MainScreenStyles.css'\n\nclass MainScreen extends Component {\n  componentDidMount() {\n    const { fetchUserData } = this.props\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        const action = {\n          payload: user.uid\n        }\n        // User is signed in.\n        fetchUserData(action)\n      } else {\n        // No user is signed in.\n      }\n    })\n  }\n\n  render() {\n    const { currentLayout, signUp, errorDescription, resetError, signUpLoading,\n      setSignUpError, login, loginLoading, setLoginError, userState, setTimesheetFileError,\n      uploadTimesheet, timesheetUploadStart, timesheetUploadError, saveToDatabase, timesheetUploading } = this.props\n    const loggedIn = userLoggedIn(userState)\n\n    return (\n      <div>\n        <MenuBar />\n        { errorDescription ?\n          <GenericErrorModal errorDescription={errorDescription} resetError={resetError} /> : null }\n        { !loggedIn && currentLayout === LAYOUTS.HOME && <HomeLayout /> }\n        { loggedIn && currentLayout === LAYOUTS.HOME && <DashboardLayout setTimesheetFileError={setTimesheetFileError} isAdmin={adminLoggedIn(userState)} uploadTimesheet={uploadTimesheet} userState={userState} timesheetUploadStart={timesheetUploadStart} timesheetUploadError={timesheetUploadError} saveToDatabase={saveToDatabase} timesheetUploading={timesheetUploading} /> }\n        { currentLayout === LAYOUTS.LOGIN && <LoginLayout login={login} isLoading={loginLoading} setLoginError={setLoginError} /> }\n        { currentLayout === LAYOUTS.SIGNUP && <SignUpLayout signUp={signUp} isLoading={signUpLoading} setSignUpError={setSignUpError} /> }\n        <div className=\"ContactTextContainer\">\n          <p className=\"ContactText\">Contact us at joshkardos@gmail.com</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nMainScreen.propTypes = {\n  currentLayout: PropTypes.string.isRequired,\n  signUp: PropTypes.func.isRequired,\n  errorDescription: PropTypes.string.isRequired,\n  resetError: PropTypes.func.isRequired,\n  signUpLoading: PropTypes.bool.isRequired,\n  setSignUpError: PropTypes.func.isRequired,\n  setLoginError: PropTypes.func.isRequired,\n  fetchUserData: PropTypes.func.isRequired,\n  login: PropTypes.func.isRequired,\n  loginLoading: PropTypes.bool.isRequired,\n  userState: PropTypes.object.isRequired,\n  setTimesheetFileError: PropTypes.func.isRequired,\n  uploadTimesheet: PropTypes.func.isRequired,\n  timesheetUploadError: PropTypes.func.isRequired,\n  saveToDatabase: PropTypes.func.isRequired,\n  timesheetUploadStart: PropTypes.func.isRequired,\n  timesheetUploading: PropTypes.bool.isRequired\n}\n\nconst mapStateToProps = state => ({\n  userState: state.UserReducers.userReducer,\n  currentLayout: state.LayoutReducers.layoutReducer.currentLayout,\n  loginLoading: state.UserReducers.userReducer.loginLoading,\n  signUpLoading: state.UserReducers.userReducer.signUpLoading,\n  errorDescription: state.ErrorReducers.errorReducer.errorDescription,\n  timesheetUploading: state.DashboardReducers.dashboardReducer.uploading\n})\n\nconst mapDispatchToProps = dispatch => ({\n  login: (email, password) => dispatch(login(email, password)),\n  signUp: (name, email, password, company) => dispatch(signUp(name, email, password, company)),\n  setSignUpError: (error) => dispatch(setSignUpError(error)),\n  setLoginError: (error) => dispatch(setLoginError(error)),\n  setTimesheetFileError: (error) => dispatch(setTimesheetFileError(error)),\n  resetError: () => dispatch(resetError()),\n  fetchUserData: (userId) => dispatch(fetchUserData(userId)),\n  uploadTimesheet: (file) => dispatch(uploadTimesheet(file)),\n  saveToDatabase: (timesheetTimePeriod, filepath, id, userId, timestamp) => dispatch(saveToDatabase(timesheetTimePeriod, filepath, id, userId, timestamp)),\n  timesheetUploadError: () => dispatch(timesheetUploadError()),\n  timesheetUploadStart: () => dispatch(timesheetUploadStart())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainScreen)\n// export default MainScreen\n"]},"metadata":{},"sourceType":"module"}