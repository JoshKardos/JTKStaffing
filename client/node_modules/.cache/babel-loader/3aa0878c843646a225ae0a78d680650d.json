{"ast":null,"code":"var crypto = require('crypto');\n\nvar self = module.exports;\nvar RANDOM_BATCH_SIZE = 256;\nvar randomIndex;\nvar randomBytes;\n\nvar getNextRandomValue = function getNextRandomValue() {\n  if (randomIndex === undefined || randomIndex >= randomBytes.length) {\n    randomIndex = 0;\n    randomBytes = crypto.randomBytes(RANDOM_BATCH_SIZE);\n  }\n\n  var result = randomBytes[randomIndex];\n  randomIndex += 1;\n  return result;\n}; // Generates a random number\n\n\nvar randomNumber = function randomNumber(max) {\n  // gives a number between 0 (inclusive) and max (exclusive)\n  var rand = getNextRandomValue();\n\n  while (rand >= 256 - 256 % max) {\n    rand = getNextRandomValue();\n  }\n\n  return rand % max;\n}; // Possible combinations\n\n\nvar lowercase = 'abcdefghijklmnopqrstuvwxyz',\n    uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n    numbers = '0123456789',\n    symbols = '!@#$%^&*()+_-=}{[]|:;\"/?.><,`~',\n    similarCharacters = /[ilLI|`oO0]/g,\n    strictRules = [{\n  name: 'lowercase',\n  rule: /[a-z]/\n}, {\n  name: 'uppercase',\n  rule: /[A-Z]/\n}, {\n  name: 'numbers',\n  rule: /[0-9]/\n}, {\n  name: 'symbols',\n  rule: /[!@#$%^&*()+_\\-=}{[\\]|:;\"/?.><,`~]/\n}];\n\nvar generate = function generate(options, pool) {\n  var password = '',\n      optionsLength = options.length,\n      poolLength = pool.length;\n\n  for (var i = 0; i < optionsLength; i++) {\n    password += pool[randomNumber(poolLength)];\n  }\n\n  if (options.strict) {\n    // Iterate over each rule, checking to see if the password works.\n    var fitsRules = strictRules.reduce(function (result, rule) {\n      // Skip checking the rule if we know it doesn't match.\n      if (result == false) return false; // If the option is not checked, ignore it.\n\n      if (options[rule.name] == false) return result; // Run the regex on the password and return whether\n      // or not it matches.\n\n      return rule.rule.test(password);\n    }, true); // If it doesn't fit the rules, generate a new one (recursion).\n\n    if (!fitsRules) return generate(options, pool);\n  }\n\n  return password;\n}; // Generate a random password.\n\n\nself.generate = function (options) {\n  // Set defaults.\n  options = options || {};\n  if (!options.hasOwnProperty('length')) options.length = 10;\n  if (!options.hasOwnProperty('numbers')) options.numbers = false;\n  if (!options.hasOwnProperty('symbols')) options.symbols = false;\n  if (!options.hasOwnProperty('exclude')) options.exclude = '';\n  if (!options.hasOwnProperty('uppercase')) options.uppercase = true;\n  if (!options.hasOwnProperty('excludeSimilarCharacters')) options.excludeSimilarCharacters = false;\n  if (!options.hasOwnProperty('strict')) options.strict = false;\n\n  if (options.strict) {\n    var minStrictLength = 1 + (options.numbers ? 1 : 0) + (options.symbols ? 1 : 0) + (options.uppercase ? 1 : 0);\n\n    if (minStrictLength > options.length) {\n      throw new TypeError('Length must correlate with strict guidelines');\n    }\n  } // Generate character pool\n\n\n  var pool = lowercase; // uppercase\n\n  if (options.uppercase) {\n    pool += uppercase;\n  } // numbers\n\n\n  if (options.numbers) {\n    pool += numbers;\n  } // symbols\n\n\n  if (options.symbols) {\n    pool += symbols;\n  } // similar characters\n\n\n  if (options.excludeSimilarCharacters) {\n    pool = pool.replace(similarCharacters, '');\n  } // excludes characters from the pool\n\n\n  var i = options.exclude.length;\n\n  while (i--) {\n    pool = pool.replace(options.exclude[i], '');\n  }\n\n  var password = generate(options, pool);\n  return password;\n}; // Generates multiple passwords at once with the same options.\n\n\nself.generateMultiple = function (amount, options) {\n  var passwords = [];\n\n  for (var i = 0; i < amount; i++) {\n    passwords[i] = self.generate(options);\n  }\n\n  return passwords;\n};","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/node_modules/generate-password/src/generate.js"],"names":["crypto","require","self","module","exports","RANDOM_BATCH_SIZE","randomIndex","randomBytes","getNextRandomValue","undefined","length","result","randomNumber","max","rand","lowercase","uppercase","numbers","symbols","similarCharacters","strictRules","name","rule","generate","options","pool","password","optionsLength","poolLength","i","strict","fitsRules","reduce","test","hasOwnProperty","exclude","excludeSimilarCharacters","minStrictLength","TypeError","replace","generateMultiple","amount","passwords"],"mappings":"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","sourcesContent":["var crypto = require('crypto');\n\nvar self = module.exports;\n\nconst RANDOM_BATCH_SIZE = 256;\n\nvar randomIndex;\nvar randomBytes;\n\nvar getNextRandomValue = function() {\n\tif (randomIndex === undefined || randomIndex >= randomBytes.length) {\n\t\trandomIndex = 0;\n\t\trandomBytes = crypto.randomBytes(RANDOM_BATCH_SIZE);\n\t}\n\n\tvar result = randomBytes[randomIndex];\n\trandomIndex += 1;\n\n\treturn result;\n};\n\n// Generates a random number\nvar randomNumber = function(max) {\n\t// gives a number between 0 (inclusive) and max (exclusive)\n\tvar rand = getNextRandomValue();\n\twhile (rand >= 256 - (256 % max)) {\n\t\trand = getNextRandomValue();\n\t}\n\treturn rand % max;\n};\n\n// Possible combinations\nvar lowercase = 'abcdefghijklmnopqrstuvwxyz',\n\tuppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\tnumbers = '0123456789',\n\tsymbols = '!@#$%^&*()+_-=}{[]|:;\"/?.><,`~',\n\tsimilarCharacters = /[ilLI|`oO0]/g,\n\tstrictRules = [\n\t\t{ name: 'lowercase', rule: /[a-z]/ },\n\t\t{ name: 'uppercase', rule: /[A-Z]/ },\n\t\t{ name: 'numbers', rule: /[0-9]/ },\n\t\t{ name: 'symbols', rule: /[!@#$%^&*()+_\\-=}{[\\]|:;\"/?.><,`~]/ }\n\t];\n\nvar generate = function(options, pool) {\n\tvar password = '',\n\t\toptionsLength = options.length,\n\t\tpoolLength = pool.length;\n\n\tfor (var i = 0; i < optionsLength; i++) {\n\t\tpassword += pool[randomNumber(poolLength)];\n\t}\n\n\tif (options.strict) {\n\t\t// Iterate over each rule, checking to see if the password works.\n\t\tvar fitsRules = strictRules.reduce(function(result, rule) {\n\t\t\t// Skip checking the rule if we know it doesn't match.\n\t\t\tif (result == false) return false;\n\n\t\t\t// If the option is not checked, ignore it.\n\t\t\tif (options[rule.name] == false) return result;\n\n\t\t\t// Run the regex on the password and return whether\n\t\t\t// or not it matches.\n\t\t\treturn rule.rule.test(password);\n\t\t}, true);\n\n\t\t// If it doesn't fit the rules, generate a new one (recursion).\n\t\tif (!fitsRules) return generate(options, pool);\n\t}\n\n\treturn password;\n};\n\n// Generate a random password.\nself.generate = function(options) {\n\t// Set defaults.\n\toptions = options || {};\n\tif (!options.hasOwnProperty('length')) options.length = 10;\n\tif (!options.hasOwnProperty('numbers')) options.numbers = false;\n\tif (!options.hasOwnProperty('symbols')) options.symbols = false;\n\tif (!options.hasOwnProperty('exclude')) options.exclude = '';\n\tif (!options.hasOwnProperty('uppercase')) options.uppercase = true;\n\tif (!options.hasOwnProperty('excludeSimilarCharacters')) options.excludeSimilarCharacters = false;\n\tif (!options.hasOwnProperty('strict')) options.strict = false;\n\n\tif (options.strict) {\n\t\tvar minStrictLength = 1 + (options.numbers ? 1 : 0) + (options.symbols ? 1 : 0) + (options.uppercase ? 1 : 0);\n\t\tif (minStrictLength > options.length) {\n\t\t\tthrow new TypeError('Length must correlate with strict guidelines');\n\t\t}\n\t}\n\n\t// Generate character pool\n\tvar pool = lowercase;\n\n\t// uppercase\n\tif (options.uppercase) {\n\t\tpool += uppercase;\n\t}\n\t// numbers\n\tif (options.numbers) {\n\t\tpool += numbers;\n\t}\n\t// symbols\n\tif (options.symbols) {\n\t\tpool += symbols;\n\t}\n\n\t// similar characters\n\tif (options.excludeSimilarCharacters) {\n\t\tpool = pool.replace(similarCharacters, '');\n\t}\n\n\t// excludes characters from the pool\n\tvar i = options.exclude.length;\n\twhile (i--) {\n\t\tpool = pool.replace(options.exclude[i], '');\n\t}\n\n\tvar password = generate(options, pool);\n\n\treturn password;\n};\n\n// Generates multiple passwords at once with the same options.\nself.generateMultiple = function(amount, options) {\n\tvar passwords = [];\n\n\tfor (var i = 0; i < amount; i++) {\n\t\tpasswords[i] = self.generate(options);\n\t}\n\n\treturn passwords;\n};\n"]},"metadata":{},"sourceType":"script"}