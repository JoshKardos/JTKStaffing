{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport { switchMap, mapTo, map, filter } from 'rxjs/operators';\nimport { TYPES as UserTypes } from '../Redux/UserRedux';\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux';\nimport firebase from '../Firebase/index';\nexport const signUpEpic = action$ => action$.pipe(ofType(UserTypes.SIGN_UP), switchMap(action => {\n  const _action$payload = action.payload,\n        name = _action$payload.name,\n        email = _action$payload.email,\n        password = _action$payload.password,\n        company = _action$payload.company;\n  return firebase.auth().createUserWithEmailAndPassword(email, password).then(() => {\n    // success\n    const ref = firebase.database().ref('users/').push();\n    const key = ref.key;\n    console.log(key);\n    return ref.set({\n      name,\n      email,\n      company\n    }, error => {\n      if (error) {\n        return {\n          type: ErrorTypes.SET_ERROR,\n          payload: error.message\n        };\n      } // SUCCESS\n      // set user redux variables\n\n\n      console.log('SUCCESS');\n      return {\n        type: UserTypes.SET_USER_DATA,\n        payload: {\n          id: key,\n          name,\n          email,\n          company\n        }\n      };\n    });\n  }).catch(error => {\n    // error\n    const errorMessage = error.message;\n    return {\n      type: ErrorTypes.SET_ERROR,\n      payload: errorMessage\n    };\n  });\n}));\nexport const setSignUpErrorEpic = action$ => action$.pipe(ofType(UserTypes.SET_SIGN_UP_ERROR), map(action => ({\n  type: ErrorTypes.SET_ERROR,\n  payload: action.payload\n})));\nexport const startSignUpLoadingEpic = action$ => action$.pipe(ofType(UserTypes.SIGN_UP), mapTo({\n  type: UserTypes.START_SIGN_UP_LOADING\n}));\nexport const stopSignUpLoadingEpic = (action$, state$) => action$.pipe(ofType(ErrorTypes.SET_ERROR), // check for sign up loading state\nfilter(() => state$.value.UserReducers.userReducer.signUpLoading), mapTo({\n  type: UserTypes.STOP_SIGN_UP_LOADING\n}));\nexport default null;","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Epics/UserEpics.js"],"names":["ofType","switchMap","mapTo","map","filter","TYPES","UserTypes","ErrorTypes","firebase","signUpEpic","action$","pipe","SIGN_UP","action","payload","name","email","password","company","auth","createUserWithEmailAndPassword","then","ref","database","push","key","console","log","set","error","type","SET_ERROR","message","SET_USER_DATA","id","catch","errorMessage","setSignUpErrorEpic","SET_SIGN_UP_ERROR","startSignUpLoadingEpic","START_SIGN_UP_LOADING","stopSignUpLoadingEpic","state$","value","UserReducers","userReducer","signUpLoading","STOP_SIGN_UP_LOADING"],"mappings":"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","sourcesContent":["import { ofType } from 'redux-observable'\nimport { switchMap, mapTo, map, filter } from 'rxjs/operators';\nimport { TYPES as UserTypes } from '../Redux/UserRedux'\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux'\nimport firebase from '../Firebase/index'\n\nexport const signUpEpic = (action$) => action$.pipe(\n  ofType(UserTypes.SIGN_UP),\n  switchMap(action => {\n    const { name, email, password, company } = action.payload\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then(() => {\n      // success\n      const ref = firebase.database().ref('users/').push()\n      const { key } = ref\n      console.log(key)\n      return ref.set({\n        name,\n        email,\n        company\n      }, (error) => {\n        if (error) {\n          return { type: ErrorTypes.SET_ERROR, payload: error.message }\n        }\n        // SUCCESS\n        // set user redux variables\n        console.log('SUCCESS')\n        return { type: UserTypes.SET_USER_DATA, payload: { id: key, name, email, company } }\n      })\n    }).catch((error) => {\n      // error\n      const errorMessage = error.message\n      return { type: ErrorTypes.SET_ERROR, payload: errorMessage }\n    })\n  })\n)\n\nexport const setSignUpErrorEpic = (action$) => action$.pipe(\n  ofType(UserTypes.SET_SIGN_UP_ERROR),\n  map((action) => ({ type: ErrorTypes.SET_ERROR, payload: action.payload }))\n)\n\nexport const startSignUpLoadingEpic = (action$) => action$.pipe(\n  ofType(UserTypes.SIGN_UP),\n  mapTo({ type: UserTypes.START_SIGN_UP_LOADING })\n)\n\nexport const stopSignUpLoadingEpic = (action$, state$) => action$.pipe(\n  ofType(ErrorTypes.SET_ERROR), // check for sign up loading state\n  filter(() => state$.value.UserReducers.userReducer.signUpLoading),\n  mapTo({ type: UserTypes.STOP_SIGN_UP_LOADING })\n)\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}