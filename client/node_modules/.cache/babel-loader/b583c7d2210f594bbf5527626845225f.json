{"ast":null,"code":"var _jsxFileName = \"/Users/joshkardos/Desktop/JTKStaffing/src/Containers/MainScreen.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport firebase from '../Firebase/index';\nimport { LAYOUTS } from '../Redux/LayoutRedux';\nimport MenuBar from '../Components/MenuBar/MenuBar';\nimport LoginLayout from './LogIn/LoginLayout';\nimport SignUpLayout from './SignUp/SignUpLayout';\nimport { signUp, setSignUpError, fetchUserData, login } from '../Redux/UserRedux';\nimport { resetError } from '../Redux/ErrorRedux';\nimport GenericErrorModal from './GenericErrorModal';\n\nclass MainScreen extends Component {\n  componentDidMount() {\n    const fetchUserData = this.props.fetchUserData;\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        const action = {\n          payload: user.uid\n        }; // User is signed in.\n\n        fetchUserData(action);\n      } else {// No user is signed in.\n      }\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          currentLayout = _this$props.currentLayout,\n          signUp = _this$props.signUp,\n          errorDescription = _this$props.errorDescription,\n          resetError = _this$props.resetError,\n          signUpLoading = _this$props.signUpLoading,\n          setSignUpError = _this$props.setSignUpError,\n          login = _this$props.login,\n          loginLoading = _this$props.loginLoading;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(MenuBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), errorDescription ? React.createElement(GenericErrorModal, {\n      errorDescription: errorDescription,\n      resetError: resetError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }) : null, currentLayout === LAYOUTS.LOGIN && React.createElement(LoginLayout, {\n      login: login,\n      isLoading: loginLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), currentLayout === LAYOUTS.SIGNUP && React.createElement(SignUpLayout, {\n      signUp: signUp,\n      isLoading: signUpLoading,\n      setSignUpError: setSignUpError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n  }\n\n}\n\nMainScreen.propTypes = {\n  currentLayout: PropTypes.string.isRequired,\n  signUp: PropTypes.func.isRequired,\n  errorDescription: PropTypes.string.isRequired,\n  resetError: PropTypes.func.isRequired,\n  signUpLoading: PropTypes.bool.isRequired,\n  setSignUpError: PropTypes.func.isRequired,\n  fetchUserData: PropTypes.func.isRequired,\n  login: PropTypes.func.isRequired,\n  loginLoading: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n  currentLayout: state.LayoutReducers.layoutReducer.currentLayout,\n  loginLoading: state.UserReducers.userReducer.loginLoading,\n  signUpLoading: state.UserReducers.userReducer.signUpLoading,\n  errorDescription: state.ErrorReducers.errorReducer.errorDescription\n});\n\nconst mapDispatchToProps = dispatch => ({\n  login: (email, password) => dispatch(login(email, password)),\n  signUp: (name, email, password, company) => dispatch(signUp(name, email, password, company)),\n  setSignUpError: error => dispatch(setSignUpError(error)),\n  resetError: () => dispatch(resetError()),\n  fetchUserData: userId => dispatch(fetchUserData(userId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainScreen); // export default MainScreen","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Containers/MainScreen.js"],"names":["React","Component","PropTypes","connect","firebase","LAYOUTS","MenuBar","LoginLayout","SignUpLayout","signUp","setSignUpError","fetchUserData","login","resetError","GenericErrorModal","MainScreen","componentDidMount","props","auth","onAuthStateChanged","user","action","payload","uid","render","currentLayout","errorDescription","signUpLoading","loginLoading","LOGIN","SIGNUP","propTypes","string","isRequired","func","bool","mapStateToProps","state","LayoutReducers","layoutReducer","UserReducers","userReducer","ErrorReducers","errorReducer","mapDispatchToProps","dispatch","email","password","name","company","error","userId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport firebase from '../Firebase/index'\nimport { LAYOUTS } from '../Redux/LayoutRedux'\nimport MenuBar from '../Components/MenuBar/MenuBar'\nimport LoginLayout from './LogIn/LoginLayout'\nimport SignUpLayout from './SignUp/SignUpLayout'\nimport { signUp, setSignUpError, fetchUserData, login } from '../Redux/UserRedux'\nimport { resetError } from '../Redux/ErrorRedux'\nimport GenericErrorModal from './GenericErrorModal'\n\nclass MainScreen extends Component {\n  componentDidMount() {\n    const { fetchUserData } = this.props\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        const action = {\n          payload: user.uid\n        }\n        // User is signed in.\n        fetchUserData(action)\n      } else {\n        // No user is signed in.\n      }\n    })\n  }\n\n  render() {\n    const { currentLayout, signUp, errorDescription, resetError, signUpLoading, setSignUpError, login, loginLoading } = this.props\n    return (\n      <div>\n        <MenuBar />\n        { errorDescription ?\n          <GenericErrorModal errorDescription={errorDescription} resetError={resetError} /> : null}\n        { currentLayout === LAYOUTS.LOGIN && <LoginLayout login={login} isLoading={loginLoading} /> }\n        { currentLayout === LAYOUTS.SIGNUP && <SignUpLayout signUp={signUp} isLoading={signUpLoading} setSignUpError={setSignUpError} /> }\n      </div>\n    )\n  }\n}\n\nMainScreen.propTypes = {\n  currentLayout: PropTypes.string.isRequired,\n  signUp: PropTypes.func.isRequired,\n  errorDescription: PropTypes.string.isRequired,\n  resetError: PropTypes.func.isRequired,\n  signUpLoading: PropTypes.bool.isRequired,\n  setSignUpError: PropTypes.func.isRequired,\n  fetchUserData: PropTypes.func.isRequired,\n  login: PropTypes.func.isRequired,\n  loginLoading: PropTypes.bool.isRequired\n}\n\nconst mapStateToProps = state => ({\n  currentLayout: state.LayoutReducers.layoutReducer.currentLayout,\n  loginLoading: state.UserReducers.userReducer.loginLoading,\n  signUpLoading: state.UserReducers.userReducer.signUpLoading,\n  errorDescription: state.ErrorReducers.errorReducer.errorDescription\n})\n\nconst mapDispatchToProps = dispatch => ({\n  login: (email, password) => dispatch(login(email, password)),\n  signUp: (name, email, password, company) => dispatch(signUp(name, email, password, company)),\n  setSignUpError: (error) => dispatch(setSignUpError(error)),\n  resetError: () => dispatch(resetError()),\n  fetchUserData: (userId) => dispatch(fetchUserData(userId))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainScreen)\n// export default MainScreen\n"]},"metadata":{},"sourceType":"module"}