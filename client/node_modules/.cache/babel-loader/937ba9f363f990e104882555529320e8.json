{"ast":null,"code":"import { ofType } from 'redux-observable';\nimport { switchMap, mapTo, map, filter } from 'rxjs/operators';\nimport { TYPES as UserTypes } from '../Redux/UserRedux';\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux';\nimport { TYPES as LayoutTypes } from '../Redux/LayoutRedux';\nimport firebase from '../Firebase/index';\nexport const signUpEpic = action$ => action$.pipe(ofType(UserTypes.SIGN_UP), switchMap(action => {\n  const _action$payload = action.payload,\n        name = _action$payload.name,\n        email = _action$payload.email,\n        password = _action$payload.password,\n        company = _action$payload.company;\n  return firebase.auth().createUserWithEmailAndPassword(email, password).then(value => {\n    // success\n    const uid = value.user.uid;\n    const ref = firebase.database().ref(`/users/${uid}`).push();\n    ref.set({\n      name,\n      email,\n      company,\n      uid\n    });\n    return {\n      type: UserTypes.SET_USER_DATA,\n      payload: {\n        id: key,\n        name,\n        email,\n        company\n      }\n    };\n  }).catch(error => {\n    // error\n    const errorMessage = error.message;\n    return {\n      type: ErrorTypes.SET_ERROR,\n      payload: errorMessage\n    };\n  });\n}));\nexport const setSignUpErrorEpic = action$ => action$.pipe(ofType(UserTypes.SET_SIGN_UP_ERROR), map(action => ({\n  type: ErrorTypes.SET_ERROR,\n  payload: action.payload\n})));\nexport const startSignUpLoadingEpic = action$ => action$.pipe(ofType(UserTypes.SIGN_UP), mapTo({\n  type: UserTypes.START_SIGN_UP_LOADING\n}));\nexport const stopSignUpLoadingEpic = (action$, state$) => action$.pipe(ofType(ErrorTypes.SET_ERROR), // check for sign up loading state\nfilter(() => state$.value.UserReducers.userReducer.signUpLoading), mapTo({\n  type: UserTypes.STOP_SIGN_UP_LOADING\n}));\nexport const fetchUserDataEpic = action$ => action$.pipe(ofType(UserTypes.FETCH_USER_DATA), switchMap(action => {\n  const userId = action.payload;\n  console.log(userId);\n  return firebase.database().ref(`/users/${userId}`).once('value').then(snapshot => {\n    console.log(snapshot.val()); // const  username = (snapshot.val() && snapshot.val().username) || 'N/A'\n\n    return {\n      type: ''\n    };\n  }); //{ type: UserTypes.SET_USER_DATA, payload: { id: key, name, email, company } }\n}));\nexport const logOutEpic = action$ => action$.pipe(ofType(UserTypes.LOG_OUT), switchMap(() => firebase.auth().signOut().then(() => {\n  // Sign-out successful.\n  return {\n    type: LayoutTypes.SET_LOG_IN_LAYOUT\n  };\n}).catch(error => {\n  return {\n    type: ErrorTypes.SET_ERROR,\n    payload: error.message\n  };\n})));\nexport default null;","map":{"version":3,"sources":["/Users/joshkardos/Desktop/JTKStaffing/src/Epics/UserEpics.js"],"names":["ofType","switchMap","mapTo","map","filter","TYPES","UserTypes","ErrorTypes","LayoutTypes","firebase","signUpEpic","action$","pipe","SIGN_UP","action","payload","name","email","password","company","auth","createUserWithEmailAndPassword","then","value","uid","user","ref","database","push","set","type","SET_USER_DATA","id","key","catch","error","errorMessage","message","SET_ERROR","setSignUpErrorEpic","SET_SIGN_UP_ERROR","startSignUpLoadingEpic","START_SIGN_UP_LOADING","stopSignUpLoadingEpic","state$","UserReducers","userReducer","signUpLoading","STOP_SIGN_UP_LOADING","fetchUserDataEpic","FETCH_USER_DATA","userId","console","log","once","snapshot","val","logOutEpic","LOG_OUT","signOut","SET_LOG_IN_LAYOUT"],"mappings":"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","sourcesContent":["import { ofType } from 'redux-observable'\nimport { switchMap, mapTo, map, filter } from 'rxjs/operators';\nimport { TYPES as UserTypes } from '../Redux/UserRedux'\nimport { TYPES as ErrorTypes } from '../Redux/ErrorRedux'\nimport { TYPES as LayoutTypes } from '../Redux/LayoutRedux'\nimport firebase from '../Firebase/index'\n\nexport const signUpEpic = (action$) => action$.pipe(\n  ofType(UserTypes.SIGN_UP),\n  switchMap(action => {\n    const { name, email, password, company } = action.payload\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then((value) => {\n      // success\n      const { uid } = value.user\n      const ref = firebase.database().ref(`/users/${uid}`).push()\n      ref.set({\n        name,\n        email,\n        company,\n        uid\n      })\n      return { type: UserTypes.SET_USER_DATA, payload: { id: key, name, email, company } }\n    }).catch((error) => {\n      // error\n      const errorMessage = error.message\n      return { type: ErrorTypes.SET_ERROR, payload: errorMessage }\n    })\n  })\n)\n\nexport const setSignUpErrorEpic = (action$) => action$.pipe(\n  ofType(UserTypes.SET_SIGN_UP_ERROR),\n  map((action) => ({ type: ErrorTypes.SET_ERROR, payload: action.payload }))\n)\n\nexport const startSignUpLoadingEpic = (action$) => action$.pipe(\n  ofType(UserTypes.SIGN_UP),\n  mapTo({ type: UserTypes.START_SIGN_UP_LOADING })\n)\n\nexport const stopSignUpLoadingEpic = (action$, state$) => action$.pipe(\n  ofType(ErrorTypes.SET_ERROR), // check for sign up loading state\n  filter(() => state$.value.UserReducers.userReducer.signUpLoading),\n  mapTo({ type: UserTypes.STOP_SIGN_UP_LOADING })\n)\n\nexport const fetchUserDataEpic = (action$) => action$.pipe(\n  ofType(UserTypes.FETCH_USER_DATA),\n  switchMap((action) => {\n    const userId = action.payload\n    console.log(userId)\n    return firebase.database().ref(`/users/${userId}`).once('value').then((snapshot) => {\n      console.log(snapshot.val())\n      // const  username = (snapshot.val() && snapshot.val().username) || 'N/A'\n      return { type: '' }\n    })\n    //{ type: UserTypes.SET_USER_DATA, payload: { id: key, name, email, company } }\n  })\n)\n\nexport const logOutEpic = (action$) => action$.pipe(\n  ofType(UserTypes.LOG_OUT),\n  switchMap(() => firebase.auth().signOut().then(() => {\n    // Sign-out successful.\n    return { type: LayoutTypes.SET_LOG_IN_LAYOUT }\n  }).catch(error => {\n    return { type: ErrorTypes.SET_ERROR, payload: error.message }\n  }))\n)\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}